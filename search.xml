<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python 基础语法]]></title>
    <url>%2F2019%2F03%2F09%2FPython-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Python基础知识串讲 01标识符和关键字标识符 什么是标识符，看下图: 开发人员在程序中自定义的一些符号和名称 标识符是自己定义的,如变量名 、函数名等 标识符的规则 标识符由字母、下划线和数字组成，且数字不能开头 思考: 下面的标识符哪些是正确的，哪些不正确，为什么？ 123456789101112131415161718fromNo12from#12my_Booleanmy-BooleanObj22ndObjmyInttest1Mike2jackMy_tExt_testtest!32haha(da)ttintjack_rosejack&amp;roseGUIG.U.I python中的标识符是区分大小写的 命名规范 见名知意 起一个有意义的名字，尽量做到看一眼就知道是什么意思(提高代码可 读性) 比如: 名字 就定义为 name , 定义学生 用 student 驼峰命名法 小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName、aDog 大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如: FirstName、LastName 不过在程序员中还有一种命名法比较流行，就是用下划线”_”来连接所有的单词，比如send_buf 关键字 什么是关键字 python一些具有特殊功能的标示符，这就是所谓的关键字 关键字，是python已经使用的了，所以不允许开发者自己定义和关键字相同的名字的标示符 查看关键字: 可以通过以下命令进行查看当前系统中的python关键字 字符串 格式化输出 123name = "Peifei"age = 30print("%s今年%d岁了。" % (name, age)) format格式化字符串 123name = "Peifei"age = 30print("&#123;name&#125;今年&#123;age&#125;岁了。".format(age=age, name=name)) 字符串的输入 123456user_name = input('请输入用户名:')print("用户名为：%s" % user_name)password = input('请输入密码:')print(type(password))print("密码为：%s" % password) 下标和切片 12345678910name = 'abcdef'# 下标print(name[0])print(name[1])print(name[2])# 切片print(name[0:3]) # 取 下标0~2 的字符print(name[0:5]) # 取 下标为0~4 的字符 切片详解 12345678910111213&gt;&gt;&gt; a = "abcdef"&gt;&gt;&gt; a[:3]'abc'&gt;&gt;&gt; a[::2]'ace'&gt;&gt;&gt; a[5:1:2]''&gt;&gt;&gt; a[1:5:2]'bd'&gt;&gt;&gt; a[::-2]'fdb'&gt;&gt;&gt; a[5:1:-2]'fd' 字符串的遍历 123name = "Peifei"for x in name: print(x) (面试)判断字符串是否包含子串常用方法。如，s = “hello python”，如何判断s中是否包含”python”? 法1： in 法2：index 法3： find 字符串常用API 面试必考字符串操作 函数名 功能 用例 replace 替换字符串，如果替换后的字符是空字符。(删除) s = “hello world”s.replace(“world”, “python”) strip 两端去空白，能去除”\n”, “\t”, “ “(空格) s = “\n\t zixingAI \t\t\n “s.strip() split 以指定的字符(参数)切割字符串 s = “www.zixinga.com&quot;s.split(“.”) join 以指定的字符拼接字符串 li = [‘www’, ‘zixinga’, ‘com’]“.”.join(li) 如有字符串my_str = hello world zixing and zixingAI，以下是常见的操作 ### 查找与统计功能 函数名 函数原型 说明 find mystr.find(str, start=0, end=len(mystr)) 检测 str 是否包含在 mystr中，如果是返回开始的索引值，否则返回-1 index mystr.index(str, start=0, end=len(mystr)) 跟find()方法一样，只不过如果str不在 mystr中会报一个异常. rfind mystr.rfind(str, start=0,end=len(mystr) ) 类似于 find()函数，不过是从右边开始查找. rindex mystr.rindex( str, start=0,end=len(mystr)) 类似于 index()，不过是从右边开始. count mystr.count(str, start=0, end=len(mystr)) 返回 str在start和end之间 在 mystr里面出现的次数 使用示例 判断功能 函数名 函数原型 说明 isalpha mystr.isalpha() 如果 mystr 所有字符都是字母 则返回 True,否则返回 False isdigit mystr.isdigit() 如果 mystr 只包含数字则返回 True 否则返回 False. isalnum mystr.isalnum() 如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False isspace mystr.isspace() 如果 mystr 中只包含空格，则返回 True，否则返回 False. startswith mystr.startswith(obj) 检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False endswith mystr.endswith(obj) 检查字符串是否以obj结束，如果是返回True,否则返回 False. 使用示例 分割与合并 函数名 函数原型 说明 split mystr.split(str, max_split) 以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串 partition mystr.partition(str) ystr以str分割成三部分,str前，str和str后 rpartition mystr.rpartition(str) 类似于 partition()函数,不过是从右边开始. splitlines mystr.splitlines() 按照行分隔，返回一个包含各行作为元素的列表 join mystr.join(str) mystr 中每个字符后面插入str,构造出一个新的字符串 转换 函数名 函数原型 说明 replace mystr.replace(str1, str2, count) 把 mystr 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次. strip mystr.strip() 删除mystr字符串两端的空白字符 lstrip mystr.lstrip() 删除 mystr 左边的空白字符 rstrip mystr.rstrip() 删除字符串末尾的空白字符 capitalize mystr.capitalize() 把字符串的第一个字符大写 title mystr.title() 把mystr的每个单词首字母大写 lower mystr.lower() 转换 mystr 中所有大写字符为小写 upper mystr.upper() 转换 mystr 中的小写字母为大写 ljust mystr.ljust(width) 返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串 rjust mystr.rjust(width) 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串 center mystr.center(width) 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串 replace strip lstrip rstrip capitalize title lower upper ljust rjust center list 打印列表 1234namesList = ['xiaoWang','xiaoZhang','xiaoHua']print(namesList[0])print(namesList[1])print(namesList[2]) 列表遍历 123namesList = ['xiaoWang','xiaoZhang','xiaoHua']for name in namesList: print(name) 列表的常见操作 添加元素 append 1234567891011121314# 定义变量A，默认有3个元素A = ['xiaoWang','xiaoZhang','xiaoHua'] print("-----添加之前，列表A的数据-----")for temp_name in A: print(temp_name) # 提示、并添加元素temp = input('请输入要添加的学生姓名:')A.append(temp) print("-----添加之后，列表A的数据-----")for temp_name in A: print(temp_name) extend 12345678&gt;&gt;&gt; a = [1, 2]&gt;&gt;&gt; b = [3, 4]&gt;&gt;&gt; a.append(b)&gt;&gt;&gt; a[1, 2, [3, 4]]&gt;&gt;&gt; a.extend(b)&gt;&gt;&gt; a[1, 2, [3, 4], 3, 4] insert 1234&gt;&gt;&gt; a = [0, 1, 2]&gt;&gt;&gt; a.insert(1, 3)&gt;&gt;&gt; a[0, 3, 1, 2] 修改元素 12345678910111213# 定义变量A，默认有3个元素A = ['xiaoWang','xiaoZhang','xiaoHua']print("-----修改之前，列表A的数据-----")for tempName in A: print(tempName)# 修改元素A[1] = 'xiaoLu'print("-----修改之后，列表A的数据-----")for tempName in A: print(tempName) 查找元素 in, not in 1234567891011# 待查找的列表name_list = ['xiaoWang','xiaoZhang','xiaoHua'] # 获取用户要查找的名字find_name = input('请输入要查找的姓名:') # 查找是否存在if find_name in name_list: print('在名单中找到了相同的名字')else: print('没有找到') index, count 123456789101112&gt;&gt;&gt; a = ['a', 'b', 'c', 'a', 'b']&gt;&gt;&gt; a.index('a', 1, 3) # 注意是左闭右开区间Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;ValueError: 'a' is not in list&gt;&gt;&gt; a.index('a', 1, 4)3&gt;&gt;&gt; a.count('b')2&gt;&gt;&gt; a.count('d')0 删除元素 del：根据下标进行删除 1234567891011movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------')for tempName in movieName: print(tempName) del movieName[2] print('------删除之后------')for tempName in movieName: print(tempName) pop：删除最后一个元素 1234567891011movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------')for tempName in movieName: print(tempName) movieName.pop() print('------删除之后------')for tempName in movieName: print(tempName) remove：根据元素的值进行删除 1234567891011movieName = ['加勒比海盗','骇客帝国','第一滴血','指环王','霍比特人','速度与激情'] print('------删除之前------')for tempName in movieName: print(tempName) movieName.remove('指环王') print('------删除之后------')for tempName in movieName: print(tempName) tuplePython的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。 访问元组 12345678910In [1]: tup = ("hello", 100, 3.14)In [2]: tup[0]Out[2]: 'hello'In [3]: tup[1]Out[3]: 100In [4]: tup[2]Out[4]: 3.14 修改元组 说明： python中不允许修改元组的数据，包括不能删除其中的元素。 元组的内置函数count, index 1234567891011&gt;&gt;&gt; a = ('a', 'b', 'c', 'a', 'b')&gt;&gt;&gt; a.index('a', 1, 3) # 注意是左闭右开区间Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;ValueError: tuple.index(x): x not in tuple&gt;&gt;&gt; a.index('a', 1, 4)3&gt;&gt;&gt; a.count('b')2&gt;&gt;&gt; a.count('d')0 dict 访问字典元素 1234info = &#123;'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'&#125;print(info['name'])print(info['address']) 若访问不存在的键，则会报错： 1234&gt;&gt;&gt; info['age']Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;KeyError: 'age' 在我们不确定字典中是否存在某个键而又想获取其值时，可以使用get方法，还可以设置默认值： 1234567&gt;&gt;&gt; age = info.get('age')&gt;&gt;&gt; age #'age'键不存在，所以age为None&gt;&gt;&gt; type(age)&lt;type 'NoneType'&gt;&gt;&gt;&gt; age = info.get('age', 18) # 若info中不存在'age'这个键，就返回默认值18&gt;&gt;&gt; age18 字典的增删改查 修改元素 字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改 demo: 1234567info = &#123;'name':'班长', 'id':100, 'sex':'f', 'address':'地球亚洲中国北京'&#125; newId = input('请输入新的学号') info['id'] = int(newId) print('修改之后的id为%d:'%info['id']) 添加元素 如果在使用 变量名[‘键’] = 数据 时，这个“键”在字典中，不存在，那么就会新增这个元素 demo:添加新的元素 123456789info = &#123;'name':'班长', 'sex':'f', 'address':'地球亚洲中国北京'&#125; # print('id为:%d'%info['id']) # 程序会中断运行，因为访问了不存在的键 new_id = input('请输入新的学号') info['id'] = new_id print('添加之后的id为:%d'%info['id']) 删除元素 demo:del删除指定的元素 1234567info = &#123;'name':'班长', 'sex':'f', 'address':'地球亚洲中国北京'&#125; print('删除前,%s'%info['name']) del info['name'] print('删除后,%s'%info['name']) demo:del删除整个字典 1234567info = &#123;'name':'monitor', 'sex':'f', 'address':'China'&#125;print('删除前,%s'%info)del infoprint('删除后,%s'%info) demo:clear清空整个字典 1234567info = &#123;'name':'monitor', 'sex':'f', 'address':'China'&#125;print('清空前,%s'%info)info.clear()print('清空后,%s'%info) 字典的遍历 遍历字典的键 123person = &#123;"name": "zhangsan", "sex": "m"&#125;for key in person.keys(): print(key) 遍历字典的值 123person = &#123;"name": "zhangsan", "sex": "m"&#125;for value in person.values(): print(value) 遍历字典的键值对 123person = &#123;"name": "zhangsan", "sex": "m"&#125;for key, value in person.items(): print("key=&#123;&#125;, value=&#123;&#125;".format(key, value))]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>hide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，Hexo]]></title>
    <url>%2F2019%2F03%2F07%2F%E4%BD%A0%E5%A5%BD%EF%BC%8CHexo%2F</url>
    <content type="text"><![CDATA[使用Hexo，是非常简单的一件事情。]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Test</tag>
      </tags>
  </entry>
</search>
